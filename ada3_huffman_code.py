# -*- coding: utf-8 -*-
"""ADA3 Huffman Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WkYiWQ9xGD8XHIKGWH7BIoWONBwB0ypw
"""

original_l1=['a','b','c','d','e','f']
l1=['a','b','c','d','e','f']
freq={
    'a':11,
    'b':12,
    'c':13,
    'd':14,
    'e':24,
    'f':26,
}
nodes={
    'a':(),
    'b':(),
    'c':(),
    'd':(),
    'e':(),
    'f':(),
}
def placeIn(x,xfreq,l1):
    i=0
    while i<len(l1) and freq[l1[i]]<xfreq:
        i+=1
    l1.insert(i,x)
    freq[x]=xfreq

def generateTree(l1,freq):
    i=0
    temp=1
    while i<len(l1)-1:
        nodes['n'+str(temp)]=(l1[i],l1[i+1])
        placeIn('n'+str(temp),freq[l1[i]]+freq[l1[i+1]],l1)
        temp+=1
        i+=2

def findCodes(node,parent_code,initial):
    ans[node]=parent_code+initial
    if len(nodes[node])==2:
        findCodes(nodes[node][0],ans[node],'0')
        findCodes(nodes[node][1],ans[node],'1')
    if len(nodes[node])==1:
        findCodes(nodes[node][0],ans[node],'0')

l1.sort(key=lambda x: freq[x])
generateTree(l1,freq)

print("\nThe list:")
print(l1)
print("\nThe frequencies:")
print(freq)
print("\nThe nodes:")
print(nodes)
ans={}
findCodes(list(nodes.keys())[-1],"","0")
for node in original_l1:
    print(node+" : "+ans[node])

# Alternative Code : A Huffman Tree Node
import heapq


class node:
	def __init__(self, freq, symbol, left=None, right=None):
		# frequency of symbol
		self.freq = freq

		# symbol name (character)
		self.symbol = symbol

		# node left of current node
		self.left = left

		# node right of current node
		self.right = right

		# tree direction (0/1)
		self.huff = ''

	def __lt__(self, nxt):
		return self.freq < nxt.freq


# utility function to print huffman
# codes for all symbols in the newly
# created Huffman tree
def printNodes(node, val=''):

	# huffman code for current node
	newVal = val + str(node.huff)

	# if node is not an edge node
	# then traverse inside it
	if(node.left):
		printNodes(node.left, newVal)
	if(node.right):
		printNodes(node.right, newVal)

		# if node is edge node then
		# display its huffman code
	if(not node.left and not node.right):
		print(f"{node.symbol} -> {newVal}")


# characters for huffman tree
chars = ['a', 'b', 'c', 'd', 'e', 'f']

# frequency of characters
freq = [5, 9, 12, 13, 16, 45]

# list containing unused nodes
nodes = []

# converting characters and frequencies
# into huffman tree nodes
for x in range(len(chars)):
	heapq.heappush(nodes, node(freq[x], chars[x]))

while len(nodes) > 1:

	# sort all the nodes in ascending order
	# based on their frequency
	left = heapq.heappop(nodes)
	right = heapq.heappop(nodes)

	# assign directional value to these nodes
	left.huff = 0
	right.huff = 1

	# combine the 2 smallest nodes to create
	# new node as their parent
	newNode = node(left.freq+right.freq, left.symbol+right.symbol, left, right)

	heapq.heappush(nodes, newNode)

# Huffman Tree is ready!
printNodes(nodes[0])

"""
Time complexity: O(nlogn) where n is the number of unique characters. If there are n nodes, extractMin() is called 2*(n â€“ 1) times. extractMin() takes O(logn) time as it calls minHeapify(). So, the overall complexity is O(nlogn).
If the input array is sorted, there exists a linear time algorithm. We will soon be discussing this in our next post.

Space complexity :- O(N)
"""