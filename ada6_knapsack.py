# -*- coding: utf-8 -*-
"""6_ADA_Knapsack.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzcWL2s9trIFlktyBsZbDFLIAf691jFU
"""

def knapSack(W, wt, val, n):
    # Create a 2D DP table
    K = [[0 for x in range(W + 1)] for x in range(n + 1)]

    # Fill the DP table
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i - 1] <= w:
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])
            else:
                K[i][w] = K[i - 1][w]

    # Backtrack to find the items included in the knapsack
    items_included = []
    w = W
    for i in range(n, 0, -1):
        if K[i][w] != K[i - 1][w]:  # Item `i-1` is included
            items_included.append(i)  # Add item index (1-based)
            w -= wt[i - 1]

    return K[n][W], items_included[::-1]  # Reverse to list items in ascending order


def main():
    while True:
        print("\n--- 0-1 Knapsack Problem ---")
        print("1. Run Knapsack")
        print("2. Exit")

        ch = input("Enter your choice: ")

        if ch == '1':
            n = int(input("Enter the number of items: "))
            val = list(map(int, input("Enter profits of the items (space-separated): ").split()))
            wt = list(map(int, input("Enter weights of the items (space-separated): ").split()))
            W = int(input("Enter the capacity of the knapsack: "))

            if len(val) != n or len(wt) != n:
                print("Error: The number of profits and weights must match the number of items.")
                continue

            max_profit, items_included = knapSack(W, wt, val, n)
            print(f"The maximum value that can be put in knapsack of capacity {W} is: {max_profit}")
            print(f"Items included in the knapsack: {', '.join(map(str, items_included))}")

        elif ch == '2':
            break
        else:
            print("Invalid choice")


if __name__ == '__main__':
    main()

"""
Time and space = O(n*W)
n=number of items
W=capacity of knapsack
"""

